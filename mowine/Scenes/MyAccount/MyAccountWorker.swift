//
//  MyAccountWorker.swift
//  mowine
//
//  Created by Josh Freed on 2/27/18.
//  Copyright (c) 2018 Josh Freed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import JFLib
import SwiftyBeaver

enum MyAccountWorkerError: Error {
    case userNotFound
}

class MyAccountWorker {
    let session: Session
    let userRepository: UserRepository
    let profilePictureWorker: ProfilePictureWorkerProtocol

    private var listener: MoWineListenerRegistration?
    
    init(session: Session, userRepository: UserRepository, profilePictureWorker: ProfilePictureWorkerProtocol) {
        self.session = session
        self.userRepository = userRepository
        self.profilePictureWorker = profilePictureWorker
    }
    
    func fetchUserAccount(completion: @escaping (Error?) -> (), userCallback: @escaping (User) -> (), profilePictureCallback: @escaping (Data?) -> ()) {
        guard let currentUserId = session.currentUserId else {
            completion(SessionError.notLoggedIn)
            return
        }
        
        listener = userRepository.getUserByIdAndListenForUpdates(id: currentUserId) { result in
            SwiftyBeaver.info("MyAccountWorker::getCurrentUser received new user data")
            
            if case let .success(u) = result, let user = u {
                userCallback(user)
                self.fetchProfilePicture(for: user, completion: profilePictureCallback)
            }
        }
        
        completion(nil)
    }
    
    func fetchProfilePicture(for user: User, completion: @escaping (Data?) -> ()) {
        profilePictureWorker.getProfilePicture(user: user) { result in
            switch result {
            case .success(let data): completion(data)
            case .failure(let error): SwiftyBeaver.error("\(error)")
            }
        }
    }

    func signOut() {
        listener?.remove()
        listener = nil
        session.end()
    }
}
