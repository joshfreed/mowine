//
//  ConfirmPhotoViewController.swift
//  mowine
//
//  Created by Josh Freed on 8/11/17.
//  Copyright (c) 2017 BleepSmazz. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ConfirmPhotoDisplayLogic: class {
    func displayPhotoPreview(viewModel: ConfirmPhoto.GetPhotoPreview.ViewModel)    
}

class ConfirmPhotoViewController: UIViewController, ConfirmPhotoDisplayLogic {
    var interactor: ConfirmPhotoBusinessLogic?
    var router: (NSObjectProtocol & ConfirmPhotoRoutingLogic & ConfirmPhotoDataPassing)?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = ConfirmPhotoInteractor()
        let presenter = ConfirmPhotoPresenter()
        let router = ConfirmPhotoRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        getPhotoPreview()
    }

    // MARK: Get photo preview

    @IBOutlet weak var previewImageView: UIImageView!

    func getPhotoPreview() {
        let request = ConfirmPhoto.GetPhotoPreview.Request()
        interactor?.getPhotoPreview(request: request)
    }

    func displayPhotoPreview(viewModel: ConfirmPhoto.GetPhotoPreview.ViewModel) {
        previewImageView.image = viewModel.photo
        previewImageView.layer.cornerRadius = previewImageView.frame.size.width / 2
        previewImageView.clipsToBounds = true
        previewImageView.contentMode = .scaleAspectFill
    }
    
    // MARK: Use a different image
    
    @IBAction func takeAnotherPhoto(_ sender: UIButton) {
        displayImagePickerController(.camera)
    }
    
    @IBAction func chooseFromLibrary(_ sender: UIButton) {
        displayImagePickerController(.photoLibrary)
    }
    
    func displayImagePickerController(_ sourceType: UIImagePickerControllerSourceType) {
        let controller = UIImagePickerController()
        controller.sourceType = sourceType
        controller.delegate = self
        present(controller, animated: true, completion: nil)
    }
    
    func useDifferentImage(_ image: UIImage) {
        let request = ConfirmPhoto.UseDifferentImage.Request(image: image)
        interactor?.useDifferentImage(request: request)
    }
}

extension ConfirmPhotoViewController: UIImagePickerControllerDelegate, UINavigationControllerDelegate {
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) {
        if let image = info[UIImagePickerControllerOriginalImage] as? UIImage {
            useDifferentImage(image)
        }
        picker.dismiss(animated: true, completion: nil)
    }
    
    func imagePickerControllerDidCancel(_ picker: UIImagePickerController){
        picker.dismiss(animated: true, completion: nil)
    }
}
