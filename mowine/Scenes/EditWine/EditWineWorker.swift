//
//  EditWineWorker.swift
//  mowine
//
//  Created by Josh Freed on 2/18/17.
//  Copyright (c) 2017 BleepSmazz. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import CoreData
import JFLib

class EditWineWorker {
    let wineRepository: WineRepository
    let wineTypeRepository: WineTypeRepository
    let wineVarietyRepository: WineVarietyRepository
    let imageWorker: WineImageWorker
    
    init(
        wineRepository: WineRepository,
        wineTypeRepository: WineTypeRepository,
        wineVarietyRepository: WineVarietyRepository,
        imageWorker: WineImageWorker
    ) {
        self.wineRepository = wineRepository
        self.wineTypeRepository = wineTypeRepository
        self.wineVarietyRepository = wineVarietyRepository
        self.imageWorker = imageWorker
    }
    
    func getWineTypes(completion: @escaping (Result<[WineType]>) -> ()) {
        wineTypeRepository.getAll(completion: completion)
    }
    
    func updateWine(wine: Wine, from request: EditWine.SaveWine.Request, completion: @escaping (Result<Wine>) -> ()) {
        wineTypeRepository.getWineType(named: request.type) { result in
            switch result {
            case .success(let newType):
                if let newType = newType {
                    self.updateWineWithType(wine: wine, from: request, newType: newType, completion: completion)
                } else {
                    completion(.failure(EditWineWorkerError.invalidWineType))
                }
            case .failure(let error): completion(.failure(error))
            }
        }
    }
    
    private func updateWineWithType(
        wine: Wine,
        from request: EditWine.SaveWine.Request,
        newType: WineType,
        completion: @escaping (Result<Wine>) -> ()
    ) {
        wine.name = request.name
        wine.rating = request.rating
        wine.location = request.location
        wine.notes = request.notes
        wine.price = request.price
        wine.pairings = request.pairings
        
        if let image = request.image {
            wine.photo = imageWorker.convertToPNGData(image: image) as Data?
            wine.thumbnail = imageWorker.createThumbnail(from: image) as Data?
        }

        wine.type = newType
        
        if let varietyName = request.variety, let variety = wine.type.getVariety(named: varietyName) {
            wine.variety = variety
        } else {
            wine.variety = nil
        }
        
        wineRepository.save(wine, completion: completion)
    }
}

enum EditWineWorkerError: Error {
    case invalidWineType
}
