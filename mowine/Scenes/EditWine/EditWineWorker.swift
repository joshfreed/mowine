//
//  EditWineWorker.swift
//  mowine
//
//  Created by Josh Freed on 2/18/17.
//  Copyright (c) 2017 BleepSmazz. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import CoreData

class EditWineWorker {
    let varietyTranslator: VarietyTranslator
    let imageWorker: WineImageWorker
    
    init(varietyTranslator: VarietyTranslator) {
        self.varietyTranslator = varietyTranslator
        self.imageWorker = WineImageWorker()
    }
    
    init(varietyTranslator: VarietyTranslator, imageWorker: WineImageWorker) {
        self.varietyTranslator = varietyTranslator
        self.imageWorker = imageWorker
    }
    
    // MARK: - Business Logic

    func saveWine(wine: Wine, request: EditWine.SaveWine.Request) throws {
        wine.name = request.name
        wine.rating = request.rating
        wine.variety = varietyTranslator.toCoreData(input: request.variety)
        wine.location = request.location
        wine.notes = request.notes
        
        if let price = request.price {
            wine.price = NSDecimalNumber(value: price)
        } else {
            wine.price = nil
        }
        
        if let image = request.image {
            wine.image = imageWorker.convertToPNGData(image: image)
            wine.thumbnail = imageWorker.createThumbnail(from: image)
        }
        
        mergePairings(wine: wine, pairings: request.pairings)
        
        try wine.managedObjectContext?.save()
    }
    
    func mergePairings(wine: Wine, pairings: [String]) {
        guard let context = wine.managedObjectContext else {
            return
        }
        guard let currentFoods = Array(wine.pairings ?? []) as? [Food] else {
            return
        }
        
        for foodName in pairings {
            if currentFoods.contains(where: { $0.name?.lowercased() == foodName.lowercased() }) {
                continue
            }
            
            let food = NSEntityDescription.insertNewObject(forEntityName: "Food", into: context) as! Food
            food.name = foodName
            wine.addToPairings(food)
        }
        
        for food in currentFoods {
            if !pairings.contains(where: { $0.lowercased() == food.name?.lowercased() }) {
                wine.removeFromPairings(food)
            }
        }
    }
}
