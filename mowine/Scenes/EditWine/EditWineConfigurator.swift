//
//  EditWineConfigurator.swift
//  mowine
//
//  Created by Josh Freed on 2/18/17.
//  Copyright (c) 2017 BleepSmazz. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

// MARK: - Connect View, Interactor, and Presenter

extension EditWineViewController: EditWinePresenterOutput {
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        router.passDataToNextScene(segue: segue)
    }
}

extension EditWineInteractor: EditWineViewControllerOutput {
}

extension EditWinePresenter: EditWineInteractorOutput {
}

class EditWineConfigurator {
    // MARK: - Object lifecycle

    static let sharedInstance = EditWineConfigurator()

    private init() {
    }

    // MARK: - Configuration

    func configure(viewController: EditWineViewController) {
        let router = EditWineRouter()
        router.viewController = viewController

        let presenter = EditWinePresenter()
        presenter.output = viewController

        let appDelegate = UIApplication.shared.delegate as! AppDelegate
        let context = appDelegate.persistentContainer.viewContext
        let worker = EditWineWorker(
            wineRepository: Container.shared.wineRepository,
            wineTypeRepository: Container.shared.wineTypeRepository,
            imageWorker: Container.shared.wineImageWorker
        )
        let interactor = EditWineInteractor(worker: worker)
        interactor.output = presenter

        viewController.output = interactor
        viewController.router = router
    }
}
