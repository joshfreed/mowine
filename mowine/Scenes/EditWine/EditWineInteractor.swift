//
//  EditWineInteractor.swift
//  mowine
//
//  Created by Josh Freed on 2/18/17.
//  Copyright (c) 2017 BleepSmazz. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol EditWineInteractorInput {
    var wine: Wine! { get set }
    func fetchWine(request: EditWine.FetchWine.Request)
    func saveWine(request: EditWine.SaveWine.Request)
}

protocol EditWineInteractorOutput {
    func presentWine(response: EditWine.FetchWine.Response)
    func navigateToMyWines()
    func presentError(_ error: Error)
}

class EditWineInteractor: EditWineInteractorInput {
    var output: EditWineInteractorOutput!
    let worker: EditWineWorker
    var wine: Wine!

    init(worker: EditWineWorker) {
        self.worker = worker
    }
    
    // MARK: - Fetch wine

    func fetchWine(request: EditWine.FetchWine.Request) {
        worker.getWineTypes() { result in
            switch result {
            case .success(let wineTypes):
                let response = EditWine.FetchWine.Response(wine: self.wine, wineTypes: wineTypes)
                self.output.presentWine(response: response)
            case .failure(let error):
                fatalError("\(error)")
            }
        }
        
    }
    
    // MARK: - Save wine
    
    func saveWine(request: EditWine.SaveWine.Request) {
        worker.updateWine(wine: wine, from: request) { result in
            switch result {
            case .success(let wine): self.saveWineSuccess(wine)
            case .failure(let error): self.output.presentError(error)
            }
        }
    }
    
    private func saveWineSuccess(_ wine: Wine) {
        NotificationCenter.default.post(name: .wineUpdated, object: nil, userInfo: ["wine": wine])
        output.navigateToMyWines()
    }
}
