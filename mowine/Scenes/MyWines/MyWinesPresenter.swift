//
//  MyWinesPresenter.swift
//  mowine
//
//  Created by Josh Freed on 1/7/17.
//  Copyright (c) 2017 BleepSmazz. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol MyWinesPresenterInput {
    func presentMyWines(response: MyWines.FetchMyWines.Response)
    func presentUpdatedWine(wine: Wine)
}

protocol MyWinesPresenterOutput: class {
    func displayMyWines(viewModel: MyWines.FetchMyWines.ViewModel)
    func displayUpdatedWine(viewModel: MyWines.FetchMyWines.ViewModel.WineViewModel)
}

class MyWinesPresenter: MyWinesPresenterInput {
    weak var output: MyWinesPresenterOutput!

    // MARK: - Presentation logic

    private func buildWineViewModel(fromModel wine: Wine) -> MyWines.FetchMyWines.ViewModel.WineViewModel {
        let name = wine.name ?? ""
        var varietyName = ""
        if let variety = wine.variety {
            varietyName = variety.name ?? ""
        }
        var thumbnail: UIImage?
        if let imageData = wine.thumbnail as? Data {
            thumbnail = UIImage(data: imageData)
        }
        
        return MyWines.FetchMyWines.ViewModel.WineViewModel(
            id: wine.objectID.uriRepresentation().absoluteString,
            thumbnail: thumbnail,
            name: name,
            variety: varietyName,
            rating: wine.rating
        )
    }
    
    func presentMyWines(response: MyWines.FetchMyWines.Response) {
        let wineViewModels: [MyWines.FetchMyWines.ViewModel.WineViewModel] = response.wines.map { wine in
            buildWineViewModel(fromModel: wine)
        }

        let viewModel = MyWines.FetchMyWines.ViewModel(wines: wineViewModels)
        output.displayMyWines(viewModel: viewModel)
    }
    
    func presentUpdatedWine(wine: Wine) {
        output.displayUpdatedWine(viewModel: buildWineViewModel(fromModel: wine))
    }
}
