//
//  MyWinesViewController.swift
//  mowine
//
//  Created by Josh Freed on 3/15/18.
//  Copyright (c) 2018 Josh Freed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import SwiftyBeaver

class MyWinesViewController: UIViewController {
    weak var wineListViewController: WineListViewController?
    
    private var myWinesService: MyWinesService!
    private var selectedWineId: String?
    
    override var preferredStatusBarStyle: UIStatusBarStyle {
        return .lightContent
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        myWinesService = MyWinesService(
            wineRepository: try! JFContainer.shared.container.resolve(),
            session: try! JFContainer.shared.container.resolve()
        )
        
        NotificationCenter.default.addObserver(self, selector: #selector(wineUpdated), name: .wineUpdated, object: nil)
        
        fetchMyWines()
    }
    
    @objc func wineUpdated(notification: Notification) {
        guard let wineId = notification.userInfo?["wineId"] as? String else {
            return
        }        
        
        guard let thumbnail = notification.userInfo?["thumbnail"] as? Data else {
            return
        }
        
        wineListViewController?.updateThumbnail(thumbnail, for: wineId)
    }
    
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if segue.identifier == "WineList" {
            let vc = segue.destination as! WineListViewController
            wineListViewController = vc
            wineListViewController?.delegate = self
            wineListViewController?.thumbnailFetcher = try! JFContainer.shared.container.resolve()
        }
        
        if segue.identifier == "EditWine" {
            let vc = segue.destination as! EditWineViewController
            vc.wineId = selectedWineId
        }
    }

    func fetchMyWines() {
        myWinesService.getMyWines { result in
            SwiftyBeaver.info("Received updated getMyWines query")
            switch result {
            case .success(let wines): self.wineListViewController?.wines = wines
            case .failure(let error): SwiftyBeaver.error("\(error)")
            }
        }
    }
    
    func selectWine(_ wine: WineListViewModel) {
        selectedWineId = wine.id
        performSegue(withIdentifier: "EditWine", sender: nil)
    }
    
    @IBAction func unwindToMyWines(_ unwindSegue: UIStoryboardSegue) {
        
    }
}

extension MyWinesViewController: WineListViewControllerDelegate {
    func didSelectWine(_ wine: WineListViewModel, at indexPath: IndexPath) {
        selectWine(wine)
    }
}

class MyWinesService {
    let wineRepository: WineRepository
    let session: Session

    init(wineRepository: WineRepository, session: Session) {
        self.wineRepository = wineRepository
        self.session = session
    }
    
    func getMyWines(completion: @escaping (Result<[WineListViewModel], Error>) -> ()) {
        guard let userId = session.currentUserId else {
            return
        }
        
        wineRepository.getWines(userId: userId) { result in
            switch result {
            case .success(let wines):
                let wines = wines
                    .sorted(by: { $0.createdAt > $1.createdAt })
                    .map({ WineListViewModel.from(wine: $0) })
                completion(.success(wines))
            case .failure(let error): completion(.failure(error))
            }
        }
    }    
}
