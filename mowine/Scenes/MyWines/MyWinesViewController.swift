//
//  MyWinesViewController.swift
//  mowine
//
//  Created by Josh Freed on 1/7/17.
//  Copyright (c) 2017 BleepSmazz. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit

protocol MyWinesViewControllerInput {
    func displayMyWines(viewModel: MyWines.FetchMyWines.ViewModel)
    func displayUpdatedWine(viewModel: MyWines.FetchMyWines.ViewModel.WineViewModel)
}

protocol MyWinesViewControllerOutput {
    var selectedWine: Wine? { get set }
    func fetchMyWines(request: MyWines.FetchMyWines.Request)
    func selectWine(atIndex index: Int)
}

class MyWinesViewController: UITableViewController, MyWinesViewControllerInput {
    var output: MyWinesViewControllerOutput!
    var router: MyWinesRouter!
    var wines: [MyWines.FetchMyWines.ViewModel.WineViewModel] = []

    // MARK: - Object lifecycle

    override func awakeFromNib() {
        super.awakeFromNib()
        MyWinesConfigurator.sharedInstance.configure(viewController: self)
    }

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        
        tableView.register(UINib(nibName: "WineTableViewCell", bundle: nil), forCellReuseIdentifier: "WineTableViewCell")
        tableView.rowHeight = UITableViewAutomaticDimension
        tableView.estimatedRowHeight = 144
        tableView.tableFooterView = UIView(frame: CGRect.zero)
        
        fetchWinesOnLoad()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        
        // Needed for now because EditWine shows the navigation bar
        navigationController?.hideNavigationBar()
    }

    // MARK: - Event handling

    func fetchWinesOnLoad() {
        // NOTE: Ask the Interactor to do some work

        let request = MyWines.FetchMyWines.Request()
        output.fetchMyWines(request: request)
    }

    // MARK: - Display logic

    func displayMyWines(viewModel: MyWines.FetchMyWines.ViewModel) {
        wines = viewModel.wines
        tableView.reloadData()
    }
    
    func displayUpdatedWine(viewModel: MyWines.FetchMyWines.ViewModel.WineViewModel) {
        if let index = wines.index(of: viewModel) {
            wines[index] = viewModel
        }
        tableView.reloadData()
    }
    
    // MARK: - UITableViewDelegate
    
    override func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return wines.count
    }
    
    override func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "WineTableViewCell", for: indexPath) as! WineTableViewCell
        cell.configure(wine: wines[indexPath.row])
        return cell
    }
    
    override func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        output.selectWine(atIndex: indexPath.row)
        router.navigateToEditWine()
    }
}
