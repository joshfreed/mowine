//
//  MyWinesWorker.swift
//  mowine
//
//  Created by Josh Freed on 3/15/18.
//  Copyright (c) 2018 Josh Freed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import JFLib
import FirebaseFirestore
import SwiftyBeaver

class MyWinesWorker {
    let wineRepository: WineRepository
    let session: Session

    init(wineRepository: WineRepository, session: Session) {
        self.wineRepository = wineRepository
        self.session = session
    }
    
    func addListener(userId: UserId, listener: @escaping (WineEvent) -> ()) {
        let db = Firestore.firestore()
        
        let query = db.collection("wines").whereField("userId", isEqualTo: userId.asString)
        
        query.addSnapshotListener { (querySnapshot, error) in
            if let error = error {
                SwiftyBeaver.error("\(error)")
                listener(.failure(error))
            } else if let snapshot = querySnapshot {
                snapshot.documentChanges.forEach { diff in
                    if (diff.type == .added) {
                        print("New wine: \(diff.document.data())")
                    }
                    if (diff.type == .modified) {
                        print("Modified wine: \(diff.document.data())")
                    }
                    if (diff.type == .removed) {
                        print("Removed wine: \(diff.document.data())")
                    }
                }
            } else {
                fatalError("unknown error with query")
            }
        }
    }
    
    func fetchMyWines(completion: @escaping (Result<[Wine]>) -> ()) {
        guard let currentUserId = session.currentUserId else {
            completion(.failure(MoWineError.notLoggedIn))
            return
        }
        wineRepository.getWines(userId: currentUserId) { result in
            switch result {
            case .success(let wines):
                let sorted = wines.sorted(by: { $0.createdAt > $1.createdAt })
                completion(.success(sorted))
            case .failure(let error):
                completion(.failure(error))
            }
        }
    }
}

enum WineEvent {
    case failure(Error)
    case added
    case modified
    case removed
}
