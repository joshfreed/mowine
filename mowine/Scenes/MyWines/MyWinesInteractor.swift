//
//  MyWinesInteractor.swift
//  mowine
//
//  Created by Josh Freed on 3/15/18.
//  Copyright (c) 2018 Josh Freed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MyWinesBusinessLogic {
    func fetchMyWines(request: MyWines.FetchMyWines.Request)
    func selectWine(atIndex index: Int)
}

protocol MyWinesDataStore {
    var selectedWine: Wine? { get set }
}

class MyWinesInteractor: MyWinesBusinessLogic, MyWinesDataStore {
    var presenter: MyWinesPresentationLogic?
    var worker: MyWinesWorker?
    
    var selectedWine: Wine?
    private var wines: [Wine] = []
    
    init() {
        NotificationCenter.default.addObserver(self, selector: #selector(wineUpdated), name: .wineUpdated, object: nil)
    }
    
    @objc func wineUpdated(notification: Notification) {
        guard let updatedWine = notification.userInfo?["wine"] as? Wine else {
            return
        }
        
        presenter?.presentUpdatedWine(wine: updatedWine)
    }
    
    // MARK: - Business logic
    
    func fetchMyWines(request: MyWines.FetchMyWines.Request) {
        worker?.fetchMyWines() { result in
            switch result {
            case .success(let wines):
                self.wines = wines
                let response = MyWines.FetchMyWines.Response(wines: wines)
                self.presenter?.presentMyWines(response: response)
            case .failure(let error): print("\(error)")
            }
        }
    }
    
    func selectWine(atIndex index: Int) {
        selectedWine = wines[index]
    }
}
