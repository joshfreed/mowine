//
//  MyWinesInteractor.swift
//  mowine
//
//  Created by Josh Freed on 1/7/17.
//  Copyright (c) 2017 BleepSmazz. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import Foundation

protocol MyWinesInteractorInput {
    var selectedWine: Wine? { get set }
    func fetchMyWines(request: MyWines.FetchMyWines.Request)
    func selectWine(atIndex index: Int)
}

protocol MyWinesInteractorOutput {
    func presentMyWines(response: MyWines.FetchMyWines.Response)
    func presentUpdatedWine(wine: Wine)
}

class MyWinesInteractor: MyWinesInteractorInput {
    var output: MyWinesInteractorOutput!
    var worker: MyWinesWorker?
    var selectedWine: Wine?
    
    private var wines: [Wine] = []

    init() {
        NotificationCenter.default.addObserver(self, selector: #selector(wineUpdated), name: .wineUpdated, object: nil)
    }
    
    @objc func wineUpdated(notification: Notification) {
        guard let updatedWine = notification.userInfo?["wine"] as? Wine else {
            return
        }
        
        output.presentUpdatedWine(wine: updatedWine)
    }
    
    // MARK: - Business logic

    func fetchMyWines(request: MyWines.FetchMyWines.Request) {
        worker?.fetchMyWines() { result in
            switch result {
            case .success(let wines):
                self.wines = wines
                let response = MyWines.FetchMyWines.Response(wines: wines)
                self.output.presentMyWines(response: response)
            case .failure(let error): break
            }
        }
    }
    
    func selectWine(atIndex index: Int) {
        selectedWine = wines[index]
    }
}
