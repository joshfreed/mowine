//
//  SignInViewController.swift
//  mowine
//
//  Created by Josh Freed on 2/27/18.
//  Copyright (c) 2018 Josh Freed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import JFLib

protocol SignInDisplayLogic: class {
    func displaySignInResult(viewModel: SignIn.SignIn.ViewModel)
}

class SignInViewController: UIViewController, SignInDisplayLogic {
    var interactor: SignInBusinessLogic?
    var router: (NSObjectProtocol & SignInRoutingLogic & SignInDataPassing)?

    @IBOutlet weak var scrollView: UIScrollView!
    
    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = SignInInteractor()
        let presenter = SignInPresenter()
        let router = SignInRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        interactor.worker = SignInWorker(emailAuth: Container.shared.emailAuthService)
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow), name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide), name: UIResponder.keyboardWillHideNotification, object: nil)
        
        hideErrorLabel()
        
        emailAddressTextField.delegate = self
        emailAddressTextField.textField.textContentType = UITextContentType.emailAddress
        emailAddressTextField.textField.returnKeyType = .next
        passwordTextField.delegate = self
        passwordTextField.textField.isSecureTextEntry = true
        passwordTextField.textField.returnKeyType = .go
        
        emailAddressTextField.becomeFirstResponder()
    }

    @objc func keyboardWillShow(notification: Notification) {
        if let keyboardSize = (notification.userInfo?[UIResponder.keyboardFrameBeginUserInfoKey] as? NSValue)?.cgRectValue {
            let kbSize = keyboardSize.size
            let contentInsets = UIEdgeInsets.init(top: 0.0, left: 0.0, bottom: kbSize.height, right: 0.0);
            scrollView.contentInset = contentInsets
            scrollView.scrollIndicatorInsets = contentInsets
        }
    }
    
    @objc func keyboardWillHide(notification: Notification) {
        scrollView.contentInset = UIEdgeInsets.zero
        scrollView.scrollIndicatorInsets = UIEdgeInsets.zero
    }
    
    // MARK: Sign In

    @IBOutlet weak var emailAddressTextField: JPFFancyTextField!
    @IBOutlet weak var passwordTextField: JPFFancyTextField!
    @IBOutlet weak var logInButton: ButtonPrimary!
    @IBOutlet weak var errorLabel: UILabel!
    
    @IBAction func tappedLogIn(_ sender: ButtonPrimary) {
        signIn()
    }
    
    func signIn() {
        hideErrorLabel()
        
        if emailAddressTextField.text == nil || emailAddressTextField.text!.isEmpty {
            emailAddressTextField.displayInvalid()
        }
        
        if passwordTextField.text == nil || passwordTextField.text!.isEmpty {
            passwordTextField.displayInvalid()
        }
        
        guard
            let emailAddress = emailAddressTextField.text, !emailAddress.isEmpty,
            let password = passwordTextField.text, !password.isEmpty
        else {
            return
        }
        
        emailAddressTextField.displayValid()
        passwordTextField.displayValid()
        
        logInButton.displayLoading()
        
        let request = SignIn.SignIn.Request(email: emailAddress, password: password)
        interactor?.signIn(request: request)
    }
    
    func hideErrorLabel() {
        errorLabel.isHidden = true
        errorLabel.text = nil
    }
    
    func showErrorLabel(_ error: String) {
        errorLabel.text = error
        errorLabel.isHidden = false
    }

    func displaySignInResult(viewModel: SignIn.SignIn.ViewModel) {
        logInButton.displayNotLoading()
        
        if viewModel.error != nil {
            showErrorLabel("An error occurred while trying to log you in. Please try again in a few minutes.")
        } else if viewModel.isLoggedIn {
            router?.routeToSignedIn()
        } else {
            showErrorLabel("Login failed. Please check your email and password and try again.")
        }        
    }
}

extension SignInViewController: JPFFancyTextFieldDelegate {
    func textFieldShouldReturn(_ textField: JPFFancyTextField) -> Bool {
        if textField == emailAddressTextField {
            passwordTextField.becomeFirstResponder()
        } else if textField == passwordTextField {
            signIn()
        }
        return true
    }
}
