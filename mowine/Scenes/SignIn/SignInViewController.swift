//
//  SignInViewController.swift
//  mowine
//
//  Created by Josh Freed on 2/27/18.
//  Copyright (c) 2018 Josh Freed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import JFLib

protocol SignInViewControllerDelegate: class {
    func signedIn(_ viewController: SignInViewController)
}

class SignInViewController: UIViewController {
    weak var delegate: SignInViewControllerDelegate?
    var worker: SignInWorker!

    @IBOutlet weak var scrollView: UIScrollView!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        worker = SignInWorker(emailAuth: JFContainer.shared.emailAuthService)
        
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillShow), name: UIResponder.keyboardWillShowNotification, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(keyboardWillHide), name: UIResponder.keyboardWillHideNotification, object: nil)
        
        hideErrorLabel()
        
        emailAddressTextField.delegate = self
        emailAddressTextField.textField.textContentType = UITextContentType.emailAddress
        emailAddressTextField.textField.returnKeyType = .next
        passwordTextField.delegate = self
        passwordTextField.textField.isSecureTextEntry = true
        passwordTextField.textField.returnKeyType = .go
        
        emailAddressTextField.becomeFirstResponder()
    }

    override func viewWillDisappear(_ animated: Bool) {
        emailAddressTextField.resignFirstResponder()
        passwordTextField.resignFirstResponder()
    }

    @objc func keyboardWillShow(notification: Notification) {
        if let keyboardSize = (notification.userInfo?[UIResponder.keyboardFrameBeginUserInfoKey] as? NSValue)?.cgRectValue {
            let kbSize = keyboardSize.size
            let contentInsets = UIEdgeInsets.init(top: 0.0, left: 0.0, bottom: kbSize.height, right: 0.0);
            scrollView.contentInset = contentInsets
            scrollView.scrollIndicatorInsets = contentInsets
        }
    }
    
    @objc func keyboardWillHide(notification: Notification) {
        scrollView.contentInset = UIEdgeInsets.zero
        scrollView.scrollIndicatorInsets = UIEdgeInsets.zero
    }
    
    // MARK: Sign In

    @IBOutlet weak var emailAddressTextField: JPFFancyTextField!
    @IBOutlet weak var passwordTextField: JPFFancyTextField!
    @IBOutlet weak var logInButton: ButtonPrimary!
    @IBOutlet weak var errorLabel: UILabel!
    
    @IBAction func tappedLogIn(_ sender: ButtonPrimary) {
        signIn()
    }
    
    func signIn() {
        hideErrorLabel()
        
        if emailAddressTextField.text == nil || emailAddressTextField.text!.isEmpty {
            emailAddressTextField.displayInvalid()
        }
        
        if passwordTextField.text == nil || passwordTextField.text!.isEmpty {
            passwordTextField.displayInvalid()
        }
        
        guard
            let emailAddress = emailAddressTextField.text, !emailAddress.isEmpty,
            let password = passwordTextField.text, !password.isEmpty
        else {
            return
        }
        
        emailAddressTextField.displayValid()
        passwordTextField.displayValid()
        
        logInButton.displayLoading()
        
        worker?.signIn(emailAddress: emailAddress, password: password) { result in
            switch result {
            case .success(let isLoggedIn): self.displaySignInResult(isLoggedIn: isLoggedIn, error: nil)
            case .failure(let error): self.displaySignInResult(isLoggedIn: false, error: error)
            }
        }
    }
    
    func hideErrorLabel() {
        errorLabel.isHidden = true
        errorLabel.text = nil
    }
    
    func showErrorLabel(_ error: String) {
        errorLabel.text = error
        errorLabel.isHidden = false
    }

    func displaySignInResult(isLoggedIn: Bool, error: Error?) {
        logInButton.displayNotLoading()
        
        if error != nil {
            showErrorLabel("An error occurred while trying to log you in. Please try again in a few minutes.")
        } else if isLoggedIn {                        
            delegate?.signedIn(self)
        } else {
            showErrorLabel("Login failed. Please check your email and password and try again.")
        }        
    }
}

extension SignInViewController: JPFFancyTextFieldDelegate {
    func textFieldShouldReturn(_ textField: JPFFancyTextField) -> Bool {
        if textField == emailAddressTextField {
            passwordTextField.becomeFirstResponder()
        } else if textField == passwordTextField {
            signIn()
        }
        return true
    }
}
