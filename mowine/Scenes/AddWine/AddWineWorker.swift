//
//  AddWineWorker.swift
//  mowine
//
//  Created by Josh Freed on 1/7/17.
//  Copyright (c) 2017 BleepSmazz. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import CoreData

class AddWineWorker {
    // MARK: - Business Logic

    func getWineTypes() -> [Type] {
        let appDelegate = UIApplication.shared.delegate as! AppDelegate
        let context = appDelegate.persistentContainer.viewContext
        let request: NSFetchRequest<Type> = Type.fetchRequest()
        
        let types: [Type]
        do {
            types = try context.fetch(request)
        } catch {
            let nserror = error as NSError
            fatalError("Unresolved error \(nserror), \(nserror.userInfo)")
        }
 
//        
//        for type in types {
//            print(type.name ?? "no name")
//            if let varieties = type.varieties {
//                for variety in varieties {
//                    print((variety as? Variety)?.name ?? "no variety name")
//                }
//            }
//        }
//        
        return types
    }
    
    func createWine(request: AddWine.SaveWine.Request) -> Wine {
        
        
        let appDelegate = UIApplication.shared.delegate as! AppDelegate
        let context = appDelegate.persistentContainer.viewContext
        let fetchRequest: NSFetchRequest<Variety> = Variety.fetchRequest()
        fetchRequest.predicate = NSPredicate(format: "name = %@", request.variety)
        
        var variety: Variety?
        do {
            variety = try context.fetch(fetchRequest).first
        } catch {
            let nserror = error as NSError
            fatalError("Unresolved error \(nserror), \(nserror.userInfo)")
        }
        
        print("\(variety?.name)")
        
        let wine = NSEntityDescription.insertNewObject(forEntityName: "Wine", into: context) as! Wine
        wine.name = request.name
        wine.rating = request.rating
        wine.variety = variety
        
        if let image = request.image {
            var proper: UIImage? = image
            
            if !(image.imageOrientation == .up || image.imageOrientation == .upMirrored) {
                let imgsize = image.size
                UIGraphicsBeginImageContext(imgsize)
                image.draw(in: CGRect(x: 0, y: 0, width: imgsize.width, height: imgsize.height))
                proper = UIGraphicsGetImageFromCurrentImageContext()
                UIGraphicsEndImageContext()
            }
            
            if let proper = proper {
                wine.image = UIImagePNGRepresentation(proper) as NSData?
            }
        }
        
        appDelegate.saveContext()
        return wine
    }
}
