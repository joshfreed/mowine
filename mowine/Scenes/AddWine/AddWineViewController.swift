//
//  AddWineViewController.swift
//  mowine
//
//  Created by Josh Freed on 1/7/17.
//  Copyright (c) 2017 BleepSmazz. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so you can apply
//  clean architecture to your iOS and Mac projects, see http://clean-swift.com
//

import UIKit
import Eureka

protocol AddWineViewControllerInput {
    func displayForm(viewModel: AddWine.FetchForm.ViewModel)
    func displayNewWine()
    func displayError(_ error: Error)
}

protocol AddWineViewControllerOutput {
    func fetchForm(request: AddWine.FetchForm.Request)
    func addWine(request: AddWine.SaveWine.Request)
}

class AddWineViewController: FormViewController, AddWineViewControllerInput {
    var output: AddWineViewControllerOutput!
    var router: AddWineRouter!
    let wineForm = WineForm()

    // MARK: - Object lifecycle

    override func awakeFromNib() {
        super.awakeFromNib()
        AddWineConfigurator.sharedInstance.configure(viewController: self)
    }

    // MARK: - View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()

        buildForm()
        fetchFormOnLoad()
    }
    
    func buildForm() {
        form = wineForm.makeWineForm()
        wineForm.nameRow.cell.textField.becomeFirstResponder()
    }

    // MARK: - Event handling
    
    func fetchFormOnLoad() {
        let request = AddWine.FetchForm.Request()
        output.fetchForm(request: request)
    }
    
    @IBAction func saveWineAction(_ sender: UIBarButtonItem) {
        let values = form.values()
        
        print(values)
        
        guard let name = values["name"] as? String else {
            return
        }
        guard let rating = values["rating"] as? Double else {
            return
        }
        guard let type = values["type"] as? WineTypeViewModel else {
            return
        }
        guard let variety = values["variety"] as? String else {
            return
        }
        
        let location = values["location"] as? String
        let price = values["price"] as? Double
        let notes = values["notes"] as? String
        
        var request = AddWine.SaveWine.Request(
            name: name,
            rating: rating,
            type: type,
            variety: variety
        )
        request.location = location
        request.price = price
        request.notes = notes
        
        request.image = values["photo"] as? UIImage
        
        for (name, value) in values {
            if name.hasPrefix("pairing_"), let food = value as? String {
                request.pairings.append(food)
            }
        }
        
        output.addWine(request: request)
    }
    
    @IBAction func cancelAction(_ sender: UIBarButtonItem) {
        dismiss(animated: true, completion: nil)
    }
    
    // MARK: - Display logic

    func displayForm(viewModel: AddWine.FetchForm.ViewModel) {
        wineForm.typeRow.options = viewModel.types
    }
    
    func displayNewWine() {
        router.navigateToMainMenu()
    }
    
    func displayError(_ error: Error) {
        showAlert(error: error)
    }
}
