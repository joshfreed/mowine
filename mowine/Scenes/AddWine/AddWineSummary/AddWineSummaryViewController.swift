//
//  AddWineSummaryViewController.swift
//  mowine
//
//  Created by Josh Freed on 9/21/17.
//  Copyright (c) 2017 BleepSmazz. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Cosmos

protocol AddWineSummaryDisplayLogic: class {
    func displayCreateWine(viewModel: AddWineSummary.CreateWine.ViewModel)
    func displayRating(viewModel: AddWineSummary.UpdateRating.ViewModel)
    func displayWineDeleted(viewModel: AddWineSummary.DeleteWine.ViewModel)
}

class AddWineSummaryViewController: UIViewController, AddWineSummaryDisplayLogic {
    var interactor: AddWineSummaryBusinessLogic?
    var router: (NSObjectProtocol & AddWineSummaryRoutingLogic & AddWineSummaryDataPassing)?

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = AddWineSummaryInteractor()
        let presenter = AddWineSummaryPresenter()
        let router = AddWineSummaryRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        interactor.worker = AddWineSummaryWorker(wineRepository: Container.shared.wineRepository, imageWorker: Container.shared.wineImageWorker)
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor        
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        
//        navigationItem.hidesBackButton = true
        navigationController?.isNavigationBarHidden = true
        
//        ratingView.didFinishTouchingCosmos = { [weak self] rating in
//            self?.updateRating(rating: rating)
//        }
        
        createWine()
    }

    // MARK: IBAction
    
    @IBAction func tappedExit(_ sender: ButtonPrimary) {
        router?.routeToMainMenu()
    }
    
    // MARK: Create wine

    @IBOutlet weak var photoImageView: UIImageView!
    @IBOutlet weak var nameLabel: UILabel!
    @IBOutlet weak var ratingView: CosmosView!
    
    func createWine() {
        let request = AddWineSummary.CreateWine.Request()
        interactor?.createWine(request: request)
    }

    func displayCreateWine(viewModel: AddWineSummary.CreateWine.ViewModel) {
        displayPhotoPreview(photo: viewModel.photo)
        nameLabel.text = viewModel.name
        ratingView.rating = viewModel.rating
    }
    
    func displayPhotoPreview(photo: UIImage?) {
        if let photo = photo {
            photoImageView.image = photo
            photoImageView.layer.cornerRadius = photoImageView.frame.size.width / 2
            photoImageView.clipsToBounds = true
            photoImageView.contentMode = .scaleAspectFill
        } else {
            photoImageView.image = #imageLiteral(resourceName: "bottle-of-wine")
            photoImageView.clipsToBounds = false
            photoImageView.contentMode = .scaleAspectFit
            photoImageView.tintColor = UIColor.lightGray
        }
    }
    
    // MARK: Update rating
    
    func updateRating(rating: Double) {
        let request = AddWineSummary.UpdateRating.Request(rating: rating)
        interactor?.updateRating(request: request)
    }
    
    func displayRating(viewModel: AddWineSummary.UpdateRating.ViewModel) {
        
    }
    
    // MARK: Edit Details
    
    @IBAction func editDetails(_ sender: UIButton) {
        router?.routeToEditWine()
    }
    
    // MARK: Delete
    
    @IBAction func deleteWine(_ sender: UIButton) {
        let actionSheet = UIAlertController(title: "Are you sure?", message: nil, preferredStyle: .actionSheet)
        actionSheet.addAction(UIAlertAction(title: "Delete", style: .destructive, handler: { _ in
            self.deleteWine()
        }))
        actionSheet.addAction(UIAlertAction(title: "Cancel", style: .cancel, handler: nil))
        present(actionSheet, animated: true, completion: nil)
    }
    
    func deleteWine() {
        let request = AddWineSummary.DeleteWine.Request()
        interactor?.deleteWine(request: request)
    }
    
    func displayWineDeleted(viewModel: AddWineSummary.DeleteWine.ViewModel) {
        router?.routeToMainMenu()
    }
}
