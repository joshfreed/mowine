//
//  FriendsPresenter.swift
//  mowine
//
//  Created by Josh Freed on 3/6/18.
//  Copyright (c) 2018 Josh Freed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FriendsPresentationLogic {
    func presentFriends(response: Friends.FetchFriends.Response)
    func presentSearchResults(response: Friends.SearchUsers.Response)
    func presentLoadingSearchResults()
    func presentAddFriend(response: Friends.AddFriend.Response)
    func presentAddFriendError(response: Friends.AddFriend.Response)
}

class FriendsPresenter: FriendsPresentationLogic {
    weak var viewController: FriendsDisplayLogic?

    // MARK: Fetch friends

    func presentFriends(response: Friends.FetchFriends.Response) {
        let friendIds = response.friends.map { $0.id }
        let friends = response.friends.map {
            makeDisplayedUser(from: $0, friends: friendIds)
        }
        let viewModel = Friends.FetchFriends.ViewModel(friends: friends)
        viewController?.displayFriends(viewModel: viewModel)
    }
    
    // MARK: Search users

    func presentSearchResults(response: Friends.SearchUsers.Response) {
        let friendIds = response.myFriends.map { $0.id }
        let matches = response.matches.map { makeDisplayedUser(from: $0, friends: friendIds) }
        let viewModel = Friends.SearchUsers.ViewModel(matches: matches)
        viewController?.displaySearchResults(viewModel: viewModel)
    }
    
    func presentLoadingSearchResults() {
        viewController?.displayLoadingSearchResults()
    }
    
    // MARK: Add friend
    
    func presentAddFriend(response: Friends.AddFriend.Response) {
        let viewModel = Friends.AddFriend.ViewModel(userId: response.userId)
        viewController?.displayFriendAdded(viewModel: viewModel)
    }
    
    func presentAddFriendError(response: Friends.AddFriend.Response) {
        let viewModel = Friends.AddFriend.ViewModel(userId: response.userId)
        viewController?.displayAddFriendError(viewModel: viewModel)
    }
    
    // MARK: Helpers
    
    private func makeDisplayedUser(from user: User, friends: [UserId]) -> Friends.DisplayedUser {
        return Friends.DisplayedUser(
            userId: String(describing: user.id),
            fullName: user.fullName,
            profilePicture: user.profilePicture ?? #imageLiteral(resourceName: "No Profile Picture"),
            isFriend: friends.contains(user.id)
        )
    }
}
