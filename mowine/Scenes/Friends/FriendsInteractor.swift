//
//  FriendsInteractor.swift
//  mowine
//
//  Created by Josh Freed on 3/6/18.
//  Copyright (c) 2018 Josh Freed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol FriendsBusinessLogic {
    func fetchFriends(request: Friends.FetchFriends.Request)
    func searchUsers(request: Friends.SearchUsers.Request)
    func cancelSearch()
    func addFriend(request: Friends.AddFriend.Request)
    func selectUser(request: Friends.SelectUser.Request)
}

protocol FriendsDataStore {
    var selectedUserId: UserId? { get }
}

class FriendsInteractor: FriendsBusinessLogic, FriendsDataStore {
    var presenter: FriendsPresentationLogic?
    var worker: FriendsWorker?
    var selectedUserId: UserId?

    enum DisplayMode {
        case friends
        case search
    }

    private(set) var displayMode: DisplayMode = .friends
    private var friends: [User] {
        return worker?.friends ?? []
    }
    private(set) var searchTimer: Timer?
    private(set) var debounceTime = 0.25
    private var lastSearchResults: [User] = []
    
    init() {
        NotificationCenter.default.addObserver(self, selector: #selector(friendWasAdded), name: .friendAdded, object: nil)
        NotificationCenter.default.addObserver(self, selector: #selector(friendWasRemoved), name: .friendRemoved, object: nil)
    }
    
    @objc func friendWasAdded(notification: Notification) {
        guard let friendId = notification.userInfo?["friendId"] as? UserId else {
            return
        }
        
        worker?.friendWasAdded(userId: friendId) { result in
            switch result {
            case .success: self.updateFriendStatus(userId: friendId, isFriend: true)
            case .failure(let error): print("\(error)")
            }
        }
    }
    
    @objc func friendWasRemoved(notification: Notification) {
        guard let friendId = notification.userInfo?["friendId"] as? UserId else {
            return
        }
        
        worker?.friendWasRemoved(userId: friendId)
        updateFriendStatus(userId: friendId, isFriend: false)
    }

    private func updateFriendStatus(userId: UserId, isFriend: Bool) {
        switch displayMode {
        case .friends: presentFriends(friends)
        case .search:
            if let index = self.lastSearchResults.index(where: { $0.id == userId }) {
                self.lastSearchResults[index].isFriend = isFriend
            }
            self.presentSearchResults(users: self.lastSearchResults)
        }
    }
    
    // MARK: Fetch Friends

    func fetchFriends(request: Friends.FetchFriends.Request) {
        displayMode = .friends

        worker?.fetchMyFriends() { result in
            switch result {
            case .success(let friends): self.presentFriends(friends)
            case .failure(let error): print("\(error)")
            }
        }
    }
    
    private func presentFriends(_ friends: [User]) {
        let response = Friends.FetchFriends.Response(friends: friends)
        presenter?.presentFriends(response: response)
    }
    
    // MARK: Search Users

    private var searches: [UUID] = []
    
    func searchUsers(request: Friends.SearchUsers.Request) {
        displayMode = .search

        print("Searching for: \(request.searchString)")

        cancelSearchTimer()
        
        guard !request.searchString.isEmpty else {
            presenter?.presentEmptySearch()
            return
        }

        print("Scheduling a search after \(debounceTime) seconds")
        
        searchTimer = Timer.scheduledTimer(withTimeInterval: debounceTime, repeats: false, block: { _ in
            self.doSearch(request: request)
        })
    }
    
    private func doSearch(request: Friends.SearchUsers.Request) {
        let searchJobId = UUID()
        
        print("doSearch \(searchJobId) \(request.searchString)")
        
        searches.append(searchJobId)
        
        worker?.searchUsers(searchString: request.searchString) { result in
            print("Work complete for \(request.searchString)")
            
            switch result {
            case .success(let users):
                guard self.searches.contains(searchJobId) else {
                    return
                }
                print("Presenting search results for \(searchJobId), \(request.searchString)")
                self.lastSearchResults = users
                self.presentSearchResults(users: users)
            case .failure(let error): print("\(error)")
            }
        }
    }
    
    private func presentSearchResults(users: [User]) {
        let response = Friends.SearchUsers.Response(matches: users, myFriends: friends)
        presenter?.presentSearchResults(response: response)
    }
    
    private func cancelSearchTimer() {
        searchTimer?.invalidate()
        searchTimer = nil
        searches = []
    }
    
    // MARK: Cancel search
    
    func cancelSearch() {
        displayMode = .friends
        cancelSearchTimer()
        presentFriends(friends)
    }
    
    // MARK: Add friend
    
    func addFriend(request: Friends.AddFriend.Request) {
        guard let userId = UserId(string: request.userId) else {
            return
        }
        
        worker?.addFriend(userId: userId) { result in
            switch result {
            case .success:
                let response = Friends.AddFriend.Response(userId: request.userId)
                self.presenter?.presentAddFriend(response: response)
            case .failure(let error):
                print("\(error)")
                let response = Friends.AddFriend.Response(userId: request.userId)
                self.presenter?.presentAddFriendError(response: response)
            }
        }
    }
    
    // MARK: Select user
    
    func selectUser(request: Friends.SelectUser.Request) {
        guard let userId = UserId(string: request.userId) else {
            return
        }
        
        selectedUserId = userId
        
        let response = Friends.SelectUser.Response()
        presenter?.presentSelectedUser(response: response)
    }
}
