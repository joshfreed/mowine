//
//  UserProfileViewController.swift
//  mowine
//
//  Created by Josh Freed on 3/13/18.
//  Copyright (c) 2018 Josh Freed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol UserProfileDisplayLogic: class {
    func displayUserProfile(viewModel: UserProfile.FetchUserProfile.ViewModel)
    func displayFriendStatus(viewModel: UserProfile.FetchFriendStatus.ViewModel)
    func displayFriended(viewModel: UserProfile.AddFriend.ViewModel)
    func displayUnfriended(viewModel: UserProfile.Unfriend.ViewModel)
}

class UserProfileViewController: UIViewController, UserProfileDisplayLogic {
    var interactor: UserProfileBusinessLogic?
    var router: (NSObjectProtocol & UserProfileRoutingLogic & UserProfileDataPassing)?

    @IBOutlet weak var profilePictureImageView: UIImageView!
    @IBOutlet weak var fullNameLabel: UILabel!
    @IBOutlet weak var segmentedControl: UISegmentedControl!
    @IBOutlet weak var topWinesView: UIView!
    @IBOutlet weak var cellarView: UIView!
    
    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = UserProfileInteractor()
        let presenter = UserProfilePresenter()
        let router = UserProfileRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        interactor.worker = UserProfileWorker(userRepository: Container.shared.userRepository, session: Container.shared.session)
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        
        topWinesView.isHidden = false
        cellarView.isHidden = true
        
        segmentedControl.addTarget(self, action: #selector(segmentChanged), for: .valueChanged)
        
        profilePictureImageView.image = #imageLiteral(resourceName: "No Profile Picture")
        
        fetchUserProfile()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        navigationItem.largeTitleDisplayMode = .never
        navigationController?.navigationBar.shadowImage = UIImage()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        navigationController?.navigationBar.shadowImage = nil
    }
    
    @objc func segmentChanged() {
        if segmentedControl.selectedSegmentIndex == 0 {
            topWinesView.isHidden = false
            cellarView.isHidden = true
        } else if segmentedControl.selectedSegmentIndex == 1 {
            topWinesView.isHidden = true
            cellarView.isHidden = false
        }
    }

    // MARK: Fetch user profile

    func fetchUserProfile() {
        let request = UserProfile.FetchUserProfile.Request()
        interactor?.fetchUserProfile(request: request)
    }

    func displayUserProfile(viewModel: UserProfile.FetchUserProfile.ViewModel) {
        fullNameLabel.text = viewModel.fullName
        segmentedControl.setTitle(viewModel.userCellarTitle, forSegmentAt: 1)
    }
    
    // MARK: Fetch friend status
    
    func displayFriendStatus(viewModel: UserProfile.FetchFriendStatus.ViewModel) {
        if viewModel.isFriend {
            showFriendsButton()
        } else {
            showNotFriendsButton()
        }
    }
    
    // MARK: Add Friend
    
    @objc func addFriend() {
        let request = UserProfile.AddFriend.Request()
        interactor?.addFriend(request: request)
    }
    
    func displayFriended(viewModel: UserProfile.AddFriend.ViewModel) {
        showFriendsButton()
    }
    
    // MARK: Unfriend
    
    @objc func showUnfriendConfirmation() {
        let alertController = UIAlertController(title: nil, message: nil, preferredStyle: .actionSheet)
        alertController.addAction(UIAlertAction(title: "Remove Friend", style: .destructive, handler: { _ in
            self.unfriend()
        }))
        alertController.addAction(UIAlertAction(title: "Cancel", style: .cancel, handler: nil))
        present(alertController, animated: true, completion: nil)
    }
    
    func unfriend() {
        let request = UserProfile.Unfriend.Request()
        interactor?.unfriend(request: request)
    }
    
    func displayUnfriended(viewModel: UserProfile.Unfriend.ViewModel) {
        showNotFriendsButton()
    }
    
    // MARK: Helpers
    
    func showFriendsButton() {
        let button = UIButton(type: .custom)
        button.titleLabel?.font = UIFont.systemFont(ofSize: 12, weight: .light)
        button.setTitle("Friends", for: .normal)
        button.setTitleColor(.white, for: .normal)
        button.backgroundColor = .mwButtonSecondary
        button.layer.cornerRadius = 5
        button.frame = CGRect(x: 0, y: 0, width: 80, height: 22)
        button.addTarget(self, action: #selector(showUnfriendConfirmation), for: .touchUpInside)
        navigationItem.rightBarButtonItem = UIBarButtonItem(customView: button)
    }
    
    func showNotFriendsButton() {
        let button = UIButton(type: .custom)
        button.titleLabel?.font = UIFont.systemFont(ofSize: 12, weight: .light)
        button.setTitle("Add Friend", for: .normal)
        button.setTitleColor(.mwButtonSecondary, for: .normal)
        button.layer.borderWidth = 1
        button.layer.cornerRadius = 5
        button.layer.borderColor = UIColor.mwButtonSecondary.cgColor
        button.frame = CGRect(x: 0, y: 0, width: 80, height: 22)
        button.addTarget(self, action: #selector(addFriend), for: .touchUpInside)
        navigationItem.rightBarButtonItem = UIBarButtonItem(customView: button)
    }
}
