//
//  WineCellarListInteractor.swift
//  mowine
//
//  Created by Josh Freed on 3/20/18.
//  Copyright (c) 2018 Josh Freed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol WineCellarListBusinessLogic {
    func fetchWines(request: WineCellarList.FetchWines.Request)
    func selectWine(request: WineCellarList.SelectWine.Request)
}

protocol WineCellarListDataStore {
    var user: User! { get set }
    var wineType: WineType! { get set }
    var selectedWine: Wine? { get }
}

class WineCellarListInteractor: WineCellarListBusinessLogic, WineCellarListDataStore {
    var presenter: WineCellarListPresentationLogic?
    var worker: WineCellarListWorker?
    var user: User!
    var wineType: WineType!
    private var wines: [Wine] = []
    var selectedWine: Wine?

    // MARK: Fetch wines

    func fetchWines(request: WineCellarList.FetchWines.Request) {
        presenter?.presentCellarName(response: WineCellarList.GetCellarName.Response(firstName: user.firstName))
        
        worker?.fetchWines(for: user.id, type: wineType) { result in
            switch result {
            case .success(let wines): self.presentWines(wines)
            case .failure(let error): print("\(error)")
            }
        }
    }
    
    private func presentWines(_ wines: [Wine]) {
        self.wines = wines
        let response = WineCellarList.FetchWines.Response(wines: wines)
        presenter?.presentWines(response: response)
    }
    
    // MARK: Select wine
    
    func selectWine(request: WineCellarList.SelectWine.Request) {
        guard let wineId = UUID(uuidString: request.wineId) else {
            return
        }
        selectedWine = wines.first(where: { $0.id == wineId })
    }
}
