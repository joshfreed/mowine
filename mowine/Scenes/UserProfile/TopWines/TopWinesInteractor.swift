//
//  TopWinesInteractor.swift
//  mowine
//
//  Created by Josh Freed on 3/14/18.
//  Copyright (c) 2018 Josh Freed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TopWinesBusinessLogic {
    func fetchTopWines(request: TopWines.FetchTopWines.Request)
    func selectWine(request: TopWines.SelectWine.Request)
}

protocol TopWinesDataStore {
    var userId: UserId! { get set }
    var selectedWine: Wine? { get }
}

class TopWinesInteractor: TopWinesBusinessLogic, TopWinesDataStore {
    var presenter: TopWinesPresentationLogic?
    var worker: TopWinesWorker?
    var userId: UserId!
    var topWines: [Wine] = []
    var selectedWine: Wine?

    // MARK: Fetch top wines

    func fetchTopWines(request: TopWines.FetchTopWines.Request) {        
        worker?.getTopWines(userId: userId) { result in
            switch result {
            case .success(let wines):
                self.topWines = wines
                let response = TopWines.FetchTopWines.Response(wines: wines)
                self.presenter?.presentTopWines(response: response)
            case .failure(let error): print("\(error)")
            }
        }
    }
    
    // MARK: Select wine
    
    func selectWine(request: TopWines.SelectWine.Request) {
        let wineId = WineId(string: request.wineId)
        
        selectedWine = topWines.first(where: { $0.id == wineId })
        
        let response = TopWines.SelectWine.Response()
        presenter?.presentSelectedWine(response: response)
    }
}
