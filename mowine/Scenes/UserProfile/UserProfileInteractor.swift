//
//  UserProfileInteractor.swift
//  mowine
//
//  Created by Josh Freed on 3/13/18.
//  Copyright (c) 2018 Josh Freed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol UserProfileBusinessLogic {
    func fetchUserProfile(request: UserProfile.FetchUserProfile.Request)
    func addFriend(request: UserProfile.AddFriend.Request)
    func unfriend(request: UserProfile.Unfriend.Request)
}

protocol UserProfileDataStore {
    var userId: UserId! { get set }
}

class UserProfileInteractor: UserProfileBusinessLogic, UserProfileDataStore {
    var presenter: UserProfilePresentationLogic?
    var worker: UserProfileWorker?
    var userId: UserId!

    // MARK: Fetch user profile

    func fetchUserProfile(request: UserProfile.FetchUserProfile.Request) {        
        worker?.fetchUser(userId: userId) { result in
            switch result {
            case .success(let user): self.presentUserProfile(user: user)
            case .failure(let error):
                print("\(error)")
            }
        }
    }
    
    private func presentUserProfile(user: User?) {
        guard let user = user else {
            print("User \(userId) not found!")
            return
        }
        
        let response = UserProfile.FetchUserProfile.Response(user: user)
        presenter?.presentUserProfile(response: response)
    }
    
    // MARK: Add friend
    
    func addFriend(request: UserProfile.AddFriend.Request) {
        worker?.friend(userId: userId) { result in
            switch result {
            case .success:
                NotificationCenter.default.post(name: .friendAdded, object: nil, userInfo: ["friendId": self.userId])
                let response = UserProfile.AddFriend.Response()
                self.presenter?.presentFriended(response: response)
            case .failure(let error):
                print("\(error)")
            }
        }
        
    }
    
    // MARK: Unfriend
    
    func unfriend(request: UserProfile.Unfriend.Request) {
        worker?.unfriend(userId: userId) { result in
            switch result {
            case .success:
                NotificationCenter.default.post(name: .friendRemoved, object: nil, userInfo: ["friendId": self.userId])
                let response = UserProfile.Unfriend.Response()
                self.presenter?.presentUnfriended(response: response)
            case .failure(let error):
                print("\(error)")
            }
        }
    }
}
