//
//  UserProfileWorker.swift
//  mowine
//
//  Created by Josh Freed on 3/13/18.
//  Copyright (c) 2018 Josh Freed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum UserProfileWorkerError: Error {
    case notLoggedIn
}

class UserProfileWorker {
    let userRepository: UserRepository
    let session: Session
    let profilePictureWorker: ProfilePictureWorkerProtocol
    
    init(userRepository: UserRepository, session: Session, profilePictureWorker: ProfilePictureWorkerProtocol) {
        self.userRepository = userRepository
        self.session = session
        self.profilePictureWorker = profilePictureWorker
    }
    
    func fetchUser(userId: UserId, completion: @escaping (Result<User?, Error>) -> ()) {
        userRepository.getUserById(userId) { result in
            switch result {
            case .success(let user): completion(.success(user))
            case .failure(let error): completion(.failure(error))
            }
        }
    }
    
    func fetchProfilePicture(userId: UserId, completion: @escaping (Result<Data?, Error>) -> ()) {
        userRepository.getUserById(userId) { result in
            switch result {
            case .success(let user):
                if let user = user {
                    self.profilePictureWorker.getProfilePicture(user: user, completion: completion)
                } else {
                    // not really a success but whatever
                    completion(.success(nil))
                }
            case .failure(let error): completion(.failure(error))
            }
        }
    }
    
    func fetchFriendStatus(userId: UserId, completion: @escaping (Result<Bool, Error>) -> ()) {
        guard let currentUserId = session.currentUserId else {
            completion(.failure(UserProfileWorkerError.notLoggedIn))
            return
        }
        
        userRepository.isFriendOf(userId: currentUserId, otherUserId: userId, completion: completion)
    }
    
    func friend(userId: UserId, completion: @escaping (Result<User, Error>) -> ()) {
        guard let currentUserId = session.currentUserId else {
            completion(.failure(UserProfileWorkerError.notLoggedIn))
            return
        }
        
        userRepository.addFriend(owningUserId: currentUserId, friendId: userId, completion: completion)
    }
    
    func unfriend(userId: UserId, completion: @escaping (Result<Void, Error>) -> ()) {
        guard let currentUserId = session.currentUserId else {
            completion(.failure(UserProfileWorkerError.notLoggedIn))
            return
        }
        
        userRepository.removeFriend(owningUserId: currentUserId, friendId: userId, completion: completion)
    }
}
