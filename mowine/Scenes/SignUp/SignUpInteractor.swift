//
//  SignUpInteractor.swift
//  mowine
//
//  Created by Josh Freed on 3/21/18.
//  Copyright (c) 2018 Josh Freed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SignUpBusinessLogic {
    func signUp(request: SignUp.SignUp.Request)
}

protocol SignUpDataStore {
    //var name: String { get set }
}

class SignUpInteractor: SignUpBusinessLogic, SignUpDataStore {
    var presenter: SignUpPresentationLogic?
    var worker: SignUpWorker?
    //var name: String = ""

    // MARK: Sign Up

    func signUp(request: SignUp.SignUp.Request) {
        // Make sure password meets the requirements
        // Make sure the email address is unique and is not associated with another account
        // Make sure firstName is not empty
        
        var user = User(id: UserId(), emailAddress: request.emailAddress)
        user.firstName = request.firstName
        user.lastName = request.lastName
        
        worker?.signUp(user: user, password: request.password) { result in
            switch result {
            case .success:
                let response = SignUp.SignUp.Response(user: user, error: nil, message: nil)
                self.presenter?.presentSignUp(response: response)
            case .failure(let error):
                print("\(error)")
                switch error {
                case EmailAuthenticationErrors.invalidPassword(let message):
                    let response = SignUp.SignUp.Response(user: nil, error: error, message: message)
                    self.presenter?.presentSignUp(response: response)
                case EmailAuthenticationErrors.emailAddressAlreadyInUse:
                    let message = "That email address is already associated with an account. Try signing in or resetting your password."
                    let response = SignUp.SignUp.Response(user: nil, error: error, message: message)
                    self.presenter?.presentSignUp(response: response)
                default:
                    let response = SignUp.SignUp.Response(user: nil, error: error, message: nil)
                    self.presenter?.presentSignUp(response: response)
                }
                
            }
        }
    }
}
