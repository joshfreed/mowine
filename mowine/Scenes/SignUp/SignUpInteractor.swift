//
//  SignUpInteractor.swift
//  mowine
//
//  Created by Josh Freed on 3/21/18.
//  Copyright (c) 2018 Josh Freed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol SignUpBusinessLogic {
    func signUp(request: SignUp.SignUp.Request)
}

protocol SignUpDataStore {
    
}

class SignUpInteractor: SignUpBusinessLogic, SignUpDataStore {
    var presenter: SignUpPresentationLogic?
    var worker: SignUpWorker?

    // MARK: Sign Up

    func signUp(request: SignUp.SignUp.Request) {
        // Make sure password meets the requirements
        // Make sure the email address is unique and is not associated with another account
        // Make sure firstName is not empty
        
        var user = User(id: UserId(), emailAddress: request.emailAddress)
        user.firstName = request.firstName
        user.lastName = request.lastName
        
        worker?.signUp(emailAddress: request.emailAddress, password: request.password) { result in
            switch result {
            case .success: self.handleSignUpSuccess(user: user)
            case .failure(let error): self.handleSignUpFailure(error: error)
            }
        }
    }

    func handleSignUpSuccess(user: User) {
        worker?.getUser(emailAddress: user.emailAddress) { result in
            switch result {
            case .success(let existingUser): self.handleGetUserSuccess(newUser: user, existingUser: existingUser)
            case .failure(let error): self.presentSignUp(user: nil, error: error)
            }
        }
    }
    
    func handleGetUserSuccess(newUser: User, existingUser: User?) {
        if let existingUser = existingUser {
            presentSignUp(user: existingUser)
        } else {
            worker?.saveNewUser(user: newUser) { result in
                switch result {
                case .success: self.presentSignUp(user: newUser)
                case .failure(let error): self.presentSignUp(user: nil, error: error)
                }
            }
        }
    }
    
    func handleSignUpFailure(error: Error) {
        switch error {
        case EmailAuthenticationErrors.invalidPassword(let message):
            presentSignUp(user: nil, error: error, message: message)
        case EmailAuthenticationErrors.emailAddressAlreadyInUse:
            let message = "That email address is already associated with an account. Try signing in or resetting your password."
            presentSignUp(user: nil, error: error, message: message)
        default:
            presentSignUp(user: nil, error: error)
        }
    }
    
    func presentSignUp(user: User?, error: Error? = nil, message: String? = nil) {
        if let e = error {
            print("\(e)")
        }
        let response = SignUp.SignUp.Response(user: user, error: error, message: message)
        self.presenter?.presentSignUp(response: response)
    }
}
