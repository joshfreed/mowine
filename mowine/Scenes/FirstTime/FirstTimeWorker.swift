//
//  FirstTimeWorker.swift
//  mowine
//
//  Created by Josh Freed on 3/20/18.
//  Copyright (c) 2018 Josh Freed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import JFLib

enum CreateUserFromFacebookInfoError: Error {
    case missingEmail
    case missingFirstName
}

class FirstTimeWorker {
    let fbAuth: FacebookAuthenticationService
    let fbGraphApi: GraphApi
    let userRepository: UserRepository
    let session: Session

    init(
        fbAuth: FacebookAuthenticationService,
        fbGraphApi: GraphApi,
        userRepository: UserRepository,
        session: Session
    ) {
        self.fbAuth = fbAuth
        self.fbGraphApi = fbGraphApi
        self.userRepository = userRepository
        self.session = session
    }

    func loginWithFacebook(token: String, completion: @escaping (EmptyResult) -> ()) {
        fbAuth.linkFacebookAccount(token: token, completion: completion)
    }
    
    func createUserFromFacebookInfo(completion: @escaping (Result<User>) -> ()) {
        getFacebookInfo { result in
            switch result {
            case .success(let fields): self.createUser(fields: fields, completion: completion)
            case .failure(let error): completion(.failure(error))
            }
        }
    }
    
    func getFacebookInfo(completion: @escaping (Result<[String: Any]>) -> ()) {
        fbGraphApi.me(params: ["fields": "email,first_name,last_name"]) { result in
            switch result {
            case .success(let fields): completion(.success(fields))
            case .failure(let error): completion(.failure(error))
            }
        }
    }
    
    func createUser(fields: [String: Any], completion: @escaping (Result<User>) -> ()) {
        guard let email = fields["email"] as? String else {
            completion(.failure(CreateUserFromFacebookInfoError.missingEmail))
            return
        }
        guard let firstName = fields["first_name"] as? String else {
            completion(.failure(CreateUserFromFacebookInfoError.missingFirstName))
            return
        }
        let lastName = fields["last_name"] as? String
        createUser(email: email, firstName: firstName, lastName: lastName, completion: completion)
    }
    
    func createUser(email: String, firstName: String, lastName: String?, completion: @escaping (Result<User>) -> ()) {
        guard let currentUserId = session.currentUserId else {
            completion(.failure(SessionError.notLoggedIn))
            return
        }
        
        var user = User(id: currentUserId, emailAddress: email)
        user.firstName = firstName
        user.lastName = lastName
        
        userRepository.add(user: user, completion: completion)
    }

    func loginWithGoogle() {

    }
}
