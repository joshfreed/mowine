//
//  FirstTimeViewController.swift
//  mowine
//
//  Created by Josh Freed on 3/20/18.
//  Copyright (c) 2018 Josh Freed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import FBSDKLoginKit
import SwiftyBeaver
import JFLib
import GoogleSignIn

protocol FirstTimeDisplayLogic: class {
    func displaySocialLogin(viewModel: FirstTime.SocialLogin.ViewModel)
}

class FirstTimeViewController: UIViewController, FirstTimeDisplayLogic, GIDSignInUIDelegate {
    var interactor: FirstTimeBusinessLogic?
    var router: (NSObjectProtocol & FirstTimeRoutingLogic & FirstTimeDataPassing)?

    weak var delegate: StartViewControllerDelegate?
    var loadingView: LoadingView!
    
    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = FirstTimeInteractor()
        let presenter = FirstTimePresenter()
        let router = FirstTimeRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        interactor.worker = FirstTimeWorker(
            fbAuth: JFContainer.shared.facebookAuthService,
            fbGraphApi: JFContainer.shared.fbGraphApi,
            userRepository: JFContainer.shared.userRepository,
            session: JFContainer.shared.session,
            googleAuth: try! JFContainer.shared.container.resolve()
        )
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        loadingView = LoadingView(parentView: navigationController!.view)
        GIDSignIn.sharedInstance().delegate = self
        GIDSignIn.sharedInstance().uiDelegate = self
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        navigationController?.setNavigationBarHidden(true, animated: true)
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
//        navigationController?.setNavigationBarHidden(false, animated: true)
    }

    // MARK: Continue with Facebook

    @IBAction func tappedContinueWithFacebook(_ sender: MWButton) {
        let login = FBSDKLoginManager()
        login.logIn(withReadPermissions: ["public_profile", "email"], from: self) { result, error in
            if let error = error {
                SwiftyBeaver.error("FB Error: \(error)")
                return
            }
            
            if let result = result, !result.isCancelled {
                self.loadingView.show("Signing in...")
                self.interactor?.linkToFacebookLogin(fbToken: result.token.tokenString)
            }
        }
    }
    
    // MARK: Continue with Google
    
    @IBAction func tappedContinueWithGoogle(_ sender: Any) {
        GIDSignIn.sharedInstance().signIn()        
    }
    
    func linkToGoogleLogin(idToken: String, accessToken: String) {
        loadingView?.show("Signing in...")
        interactor?.linkToGoogleLogin(idToken: idToken, accessToken: accessToken)
    }
    
    //  MARK: Social Login
    
    func displaySocialLogin(viewModel: FirstTime.SocialLogin.ViewModel) {
        if let error = viewModel.error {
            loadingView.hide()
            showAlert(title: "Login Error", message: error.localizedDescription)
        } else {
            router?.routeToSignedIn()
        }
    }

    // MARK: Continue with email
    
    @IBAction func tappedContinueWithEmail(_ sender: ButtonOutline) {
        let signUp = SignUpByEmailViewController(delegate: self)
        present(signUp, animated: true, completion: nil)
    }

    // Helpers

    private func showSignedInView() {
        delegate?.showSignedInView()
    }
}

extension FirstTimeViewController: GIDSignInDelegate {
    func sign(_ signIn: GIDSignIn!, didSignInFor user: GIDGoogleUser!, withError error: Error!) {
        if let error = error as NSError? {
            SwiftyBeaver.error(error)
            guard error.code != -5 else {
                return
            }
            fatalError(error.localizedDescription)
//            ErrorBanner.show(message: error.localizedDescription)
        } else {
            linkToGoogleLogin(idToken: user.authentication.idToken, accessToken: user.authentication.accessToken)
        }
    }
    
    func sign(_ signIn: GIDSignIn!, didDisconnectWith user: GIDGoogleUser!, withError error: Error!) {
        // Perform any operations when the user disconnects from app here.
        // ...
    }
}

extension FirstTimeViewController: SignUpByEmailViewControllerDelegate {
    func signUpComplete() {
        showSignedInView()
    }
}
