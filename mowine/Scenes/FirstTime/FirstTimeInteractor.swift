//
//  FirstTimeInteractor.swift
//  mowine
//
//  Created by Josh Freed on 3/20/18.
//  Copyright (c) 2018 Josh Freed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import JFLib
import SwiftyBeaver

protocol FirstTimeBusinessLogic {
    func linkToFacebookLogin(fbToken: String)
    func linkToGoogleLogin(idToken: String, accessToken: String)
}

protocol FirstTimeDataStore {
    
}

class FirstTimeInteractor: FirstTimeBusinessLogic, FirstTimeDataStore {
    var presenter: FirstTimePresentationLogic?
    var worker: FirstTimeWorker?

    // MARK: Social login
    
    func presentSocialLogin() {
        let response = FirstTime.SocialLogin.Response(error: nil)
        self.presenter?.presentSocialLogin(response: response)
    }
    
    func presentSocialLoginError(_ error: Error) {
        print("\(error)")
        let response = FirstTime.SocialLogin.Response(error: error)
        self.presenter?.presentSocialLogin(response: response)
    }
    
    // MARK: Login with facebook

    func linkToFacebookLogin(fbToken: String) {
        worker?.loginWithFacebook(token: fbToken) { result in
            switch result {
            case .success: self.createUserFromFacebookInfo()
            case .failure(let error): self.presentSocialLoginError(error)
            }
        }
    }
    
    func createUserFromFacebookInfo() {
        worker?.createUserFromFacebookInfo { result in
            switch result {
            case .success: self.presentSocialLogin()
            case .failure(let error): self.presentSocialLoginError(error)
            }
        }
    }

    // MARK: Login with Google
    
    func linkToGoogleLogin(idToken: String, accessToken: String) {
        worker?.loginWithGoogle(idToken: idToken, accessToken: accessToken) { result in
            switch result {
            case .success: self.createUserFromGoogleInfo()
            case .failure(let error): self.presentSocialLoginError(error)
            }
        }
    }
    
    func createUserFromGoogleInfo() {
        worker?.createUserFromGoogleInfo { result in
            switch result {
            case .success: self.presentSocialLogin()
            case .failure(let error): self.presentSocialLoginError(error)
            }
        }
    }    
}
