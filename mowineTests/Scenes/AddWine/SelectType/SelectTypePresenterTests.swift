//
//  SelectTypePresenterTests.swift
//  mowine
//
//  Created by Josh Freed on 2/22/18.
//  Copyright (c) 2018 Josh Freed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import mowine
import XCTest
import Nimble

class SelectTypePresenterTests: XCTestCase {
    // MARK: Subject under test

    var sut: SelectTypePresenter!
    let spy = SelectTypeDisplayLogicSpy()

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        setupSelectTypePresenter()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup

    func setupSelectTypePresenter() {
        sut = SelectTypePresenter()
        sut.viewController = spy
    }

    // MARK: Test doubles

    class SelectTypeDisplayLogicSpy: SelectTypeDisplayLogic {
        var displaySomethingCalled = false
        var displayedViewModel: SelectType.SelectType.ViewModel?

        func displaySelectedType(viewModel: SelectType.SelectType.ViewModel) {
            displaySomethingCalled = true
            displayedViewModel = viewModel
        }
    }

    // MARK: Tests

    func testPresentSelectedType() {
        // Given
        let type = WineType(name: "Red", varieties: [WineVariety(name: "Merlot")])
        let response = SelectType.SelectType.Response(type: type)

        // When
        sut.presentSelectedType(response: response)

        // Then
        XCTAssertTrue(spy.displaySomethingCalled, "presentSomething(response:) should ask the view controller to display the result")
        expect(self.spy.displayedViewModel).toNot(beNil())
        expect(self.spy.displayedViewModel?.hasVarieties).to(beTrue())
    }
    
    func testPresentSelectedType_no_varieties() {
        // Given
        let type = WineType(name: "Red", varieties: [])
        let response = SelectType.SelectType.Response(type: type)
        
        // When
        sut.presentSelectedType(response: response)
        
        // Then
        XCTAssertTrue(spy.displaySomethingCalled, "presentSomething(response:) should ask the view controller to display the result")
        expect(self.spy.displayedViewModel).toNot(beNil())
        expect(self.spy.displayedViewModel?.hasVarieties).to(beFalse())
    }
}
