//
//  SelectTypeViewControllerTests.swift
//  mowine
//
//  Created by Josh Freed on 2/22/18.
//  Copyright (c) 2018 Josh Freed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import mowine
import XCTest
import Nimble

class SelectTypeViewControllerTests: XCTestCase {
    // MARK: Subject under test

    var sut: SelectTypeViewController!
    var window: UIWindow!
    let router = MockSelectTypeRouter()

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupSelectTypeViewController()
        sut.router = router
    }

    override func tearDown() {
        window = nil
        super.tearDown()
    }

    // MARK: Test setup

    func setupSelectTypeViewController() {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier:"SelectTypeViewController") as! SelectTypeViewController
    }

    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }

    // MARK: Test doubles

    class SelectTypeBusinessLogicSpy: SelectTypeBusinessLogic {
        var doSomethingCalled = false

        func selectType(request: SelectType.SelectType.Request) {
            doSomethingCalled = true
        }
    }
    
    class MockSelectTypeRouter: NSObject, SelectTypeRoutingLogic, SelectTypeDataPassing {
        var dataStore: SelectTypeDataStore?
        
        var routedToSelectVariety = false
        func routeToSelectVariety(segue: UIStoryboardSegue?)
        {
            routedToSelectVariety = true
        }
        
        var routedToSnapPhoto = false
        func routeToSnapPhoto(segue: UIStoryboardSegue?) {
            routedToSnapPhoto = true
        }
    }

    // MARK: Tests

    func testDisplaySelectedType() {
        // Given
        let viewModel = SelectType.SelectType.ViewModel(hasVarieties: true)

        // When
        loadView()
        sut.displaySelectedType(viewModel: viewModel)

        // Then
        expect(self.router.routedToSelectVariety).to(beTrue())
    }
    
    func testDisplaySelectedType_skipsDirectlyToSnapPhotoWhenTheWineTypeHasNoVarieties() {
        // Given
        let viewModel = SelectType.SelectType.ViewModel(hasVarieties: false)
        
        // When
        loadView()
        sut.displaySelectedType(viewModel: viewModel)
        
        // Then
        expect(self.router.routedToSelectVariety).to(beFalse())
        expect(self.router.routedToSnapPhoto).to(beTrue())
    }
}
