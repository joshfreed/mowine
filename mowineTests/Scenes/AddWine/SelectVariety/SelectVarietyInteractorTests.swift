//
//  SelectVarietyInteractorTests.swift
//  mowine
//
//  Created by Josh Freed on 7/8/17.
//  Copyright (c) 2017 BleepSmazz. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import mowine
import XCTest
import Nimble
import CoreData

class SelectVarietyInteractorTests: XCTestCase {
    // MARK: Subject under test

    var context: NSManagedObjectContext!
    var sut: SelectVarietyInteractor!
    let presenter = MockPresenter()

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        setupSelectVarietyInteractor()
        context = setUpInMemoryManagedObjectContext()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup

    func setupSelectVarietyInteractor() {
        sut = SelectVarietyInteractor()
        sut.presenter = presenter
    }

    // MARK: Test doubles
    
    class MockPresenter: SelectVarietyPresentationLogic {
        var presentVarietiesWasCalled = false
        func presentVarieties(response: SelectVariety.FetchVarieties.Response) {
            presentVarietiesWasCalled = true
        }
        
        var presentSelectedVarietyWasCalled = false
        func presentSelectedVariety(response: SelectVariety.SelectVariety.Response) {
            presentSelectedVarietyWasCalled = true
        }
    }

    // MARK: fetchVarieties

    func testFetchVarieties() {
        // Given
        let wineType = Type(context: context)
        wineType.name = "Red"
        let variety1 = Variety(context: context)
        variety1.name = "Variety 1"
        let variety2 = Variety(context: context)
        variety2.name = "Variety 2"
        let variety3 = Variety(context: context)
        variety3.name = "Variety 3"
        wineType.addToVarieties(variety1)
        wineType.addToVarieties(variety2)
        wineType.addToVarieties(variety3)
        sut.wineType = wineType

        // When
        let request = SelectVariety.FetchVarieties.Request()
        sut.fetchVarieties(request: request)

        // Then
        expect(self.sut.varieties).to(haveCount(3))
        expect(self.sut.varieties).to(contain(variety1))
        expect(self.sut.varieties).to(contain(variety2))
        expect(self.sut.varieties).to(contain(variety3))
        expect(self.presenter.presentVarietiesWasCalled).to(equal(true))
    }
    
    // MARK: selectVariety
    
    func testSelectVariety() {
        // Given
        let variety1 = Variety(context: context)
        variety1.name = "Variety 1"
        let variety2 = Variety(context: context)
        variety2.name = "Variety 2"
        let variety3 = Variety(context: context)
        variety3.name = "Variety 3"
        sut.varieties = [variety1, variety2, variety3]
        let request = SelectVariety.SelectVariety.Request(variety: "Variety 2")
        
        // When
        sut.selectVariety(request: request)
        
        // Then
        expect(self.sut.selectedVariety).to(beIdenticalTo(variety2))
        expect(self.presenter.presentSelectedVarietyWasCalled).to(equal(true))
    }
    
    func testSelectVariety_doesNothingIfTheNameIsNotValid() {
        // Given
        let variety1 = Variety(context: context)
        variety1.name = "Variety 1"
        let variety2 = Variety(context: context)
        variety2.name = "Variety 2"
        let variety3 = Variety(context: context)
        variety3.name = "Variety 3"
        sut.varieties = [variety1, variety2, variety3]
        let request = SelectVariety.SelectVariety.Request(variety: "Turkey")
        
        // When
        sut.selectVariety(request: request)
        
        // Then
        expect(self.sut.selectedVariety).to(beNil())
        expect(self.presenter.presentSelectedVarietyWasCalled).to(equal(false))
    }
}
