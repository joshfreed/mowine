//
//  SelectVarietyInteractorTests.swift
//  mowine
//
//  Created by Josh Freed on 7/8/17.
//  Copyright (c) 2017 BleepSmazz. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import mowine
import XCTest
import Nimble

class SelectVarietyInteractorTests: XCTestCase {
    // MARK: Subject under test

    var sut: SelectVarietyInteractor!
    let presenter = MockPresenter()
    let variety1 = WineVariety(name: "Variety 1")
    let variety2 = WineVariety(name: "Variety 2")
    let variety3 = WineVariety(name: "Variety 3")

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        setupSelectVarietyInteractor()
        
        let wineType = WineType(name: "Red", varieties: [variety1, variety2, variety3])
        sut.wineType = wineType
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup

    func setupSelectVarietyInteractor() {
        sut = SelectVarietyInteractor()
        sut.presenter = presenter
    }

    // MARK: Test doubles
    
    class MockPresenter: SelectVarietyPresentationLogic {
        var presentVarietiesWasCalled = false
        var presentedVarieties: [WineVariety] = []
        func presentVarieties(response: SelectVariety.FetchVarieties.Response) {
            presentVarietiesWasCalled = true
            presentedVarieties = response.varieties
        }
        
        var presentSelectedVarietyWasCalled = false
        func presentSelectedVariety(response: SelectVariety.SelectVariety.Response) {
            presentSelectedVarietyWasCalled = true
        }
    }

    // MARK: fetchVarieties

    func testFetchVarieties() {
        // Given
        let request = SelectVariety.FetchVarieties.Request()
        
        // When
        sut.fetchVarieties(request: request)

        // Then
        expect(self.presenter.presentVarietiesWasCalled).to(equal(true))
        expect(self.presenter.presentedVarieties).to(haveCount(3))
        expect(self.presenter.presentedVarieties).to(contain(variety1))
        expect(self.presenter.presentedVarieties).to(contain(variety2))
        expect(self.presenter.presentedVarieties).to(contain(variety3))
    }
    
    // MARK: selectVariety
    
    func testSelectVariety() {
        // Given
        let request = SelectVariety.SelectVariety.Request(variety: "Variety 2")
        
        // When
        sut.selectVariety(request: request)
        
        // Then
        expect(self.sut.selectedVariety).to(equal(variety2))
        expect(self.presenter.presentSelectedVarietyWasCalled).to(equal(true))
    }
    
    func testSelectVariety_doesNothingIfTheNameIsNotValid() {
        // Given
        let request = SelectVariety.SelectVariety.Request(variety: "Turkey")
        
        // When
        sut.selectVariety(request: request)
        
        // Then
        expect(self.sut.selectedVariety).to(beNil())
        expect(self.presenter.presentSelectedVarietyWasCalled).to(equal(false))
    }
}
