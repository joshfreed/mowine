//
//  SignInViewControllerTests.swift
//  mowine
//
//  Created by Josh Freed on 2/27/18.
//  Copyright (c) 2018 Josh Freed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import mowine
import XCTest
import Nimble

class SignInViewControllerTests: XCTestCase {
    // MARK: Subject under test

    var sut: SignInViewController!
    var window: UIWindow!
    var router = MockSignInRouter()

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupSignInViewController()
        sut.router = router
    }

    override func tearDown() {
        window = nil
        super.tearDown()
    }

    // MARK: Test setup

    func setupSignInViewController() {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier:"SignInViewController") as! SignInViewController
    }

    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }

    // MARK: Test doubles

    class SignInBusinessLogicSpy: SignInBusinessLogic {
        var signInWasCalled = false
        
        func signIn(request: SignIn.SignIn.Request) {
            signInWasCalled = true
        }
    }
    
    enum MyFakeError: Error {
        case somethingWentWrong
    }
    
    class MockSignInRouter: NSObject, SignInRoutingLogic, SignInDataPassing {
        var dataStore: SignInDataStore?
        
        var routedToMyAccount = false
        func routeToMyAccount() {
            routedToMyAccount = true
        }
        
        var routedToFriends = false
        func routeToFriends() {
            routedToFriends = true
        }
    }

    // MARK: Tests

    func testDisplaySignInResult_loginSuccess() {
        // Given
        let viewModel = SignIn.SignIn.ViewModel(isLoggedIn: true, error: nil, routeTo: .myAccount)
        loadView()
        sut.logInButton.displayLoading()
        sut.hideErrorLabel()

        // When
        sut.displaySignInResult(viewModel: viewModel)

        // Then
        expect(self.sut.logInButton.isLoading).to(beFalse())
        expect(self.sut.errorLabel.isHidden).to(beTrue())
        expect(self.router.routedToMyAccount).to(beTrue())
        expect(self.router.routedToFriends).to(beFalse())
    }
    
    func testDisplaySignInResult_loginSuccess_routesToFriends() {
        // Given
        let viewModel = SignIn.SignIn.ViewModel(isLoggedIn: true, error: nil, routeTo: .friends)
        loadView()
        sut.logInButton.displayLoading()
        sut.hideErrorLabel()
        
        // When
        sut.displaySignInResult(viewModel: viewModel)
        
        // Then
        expect(self.sut.logInButton.isLoading).to(beFalse())
        expect(self.sut.errorLabel.isHidden).to(beTrue())
        expect(self.router.routedToMyAccount).to(beFalse())
        expect(self.router.routedToFriends).to(beTrue())
    }
    
    func testDisplaySignInResult_loginFailed() {
        // Given
        let viewModel = SignIn.SignIn.ViewModel(isLoggedIn: false, error: nil, routeTo: .myAccount)
        loadView()
        sut.logInButton.displayLoading()
        sut.hideErrorLabel()
        
        // When
        sut.displaySignInResult(viewModel: viewModel)
        
        // Then
        expect(self.sut.logInButton.isLoading).to(beFalse())
        expect(self.sut.errorLabel.isHidden).to(beFalse())
        expect(self.sut.errorLabel.text).to(equal("Login failed. Please check your email and password and try again."))
        expect(self.router.routedToMyAccount).to(beFalse())
    }
    
    func testDisplaySignInResult_withError() {
        // Given
        let viewModel = SignIn.SignIn.ViewModel(isLoggedIn: false, error: MyFakeError.somethingWentWrong, routeTo: .myAccount)
        loadView()
        sut.logInButton.displayLoading()
        sut.hideErrorLabel()
        
        // When
        sut.displaySignInResult(viewModel: viewModel)
        
        // Then
        expect(self.sut.logInButton.isLoading).to(beFalse())
        expect(self.sut.errorLabel.isHidden).to(beFalse())
        expect(self.sut.errorLabel.text).to(equal("An error occurred while trying to log you in. Please try again in a few minutes."))
        expect(self.router.routedToMyAccount).to(beFalse())
    }
}
