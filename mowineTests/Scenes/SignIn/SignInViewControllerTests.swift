//
//  SignInViewControllerTests.swift
//  mowine
//
//  Created by Josh Freed on 2/27/18.
//  Copyright (c) 2018 Josh Freed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import mowine
import XCTest
import Nimble

class SignInViewControllerTests: XCTestCase {
    // MARK: Subject under test

    var sut: SignInViewController!
    var window: UIWindow!
    let worker = MockSignInWorker()
    let delegate = MockDelegate()

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupSignInViewController()
        sut.worker = worker
        sut.delegate = delegate
    }

    override func tearDown() {
        window = nil
        super.tearDown()
    }

    // MARK: Test setup

    func setupSignInViewController() {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "SignIn", bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier:"SignInViewController") as! SignInViewController
    }

    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }

    // MARK: Test doubles

    class MockSignInWorker: SignInWorker {
        init() {
            super.init(emailAuth: MockEmailAuthService())
        }
        
        var signInWasCalled = false
        
        override func signIn(emailAddress: String, password: String, completion: @escaping (Result<Bool, Error>) -> ()) {
            signInWasCalled = true
        }
    }
    
    enum MyFakeError: Error {
        case somethingWentWrong
    }
    
    class MockDelegate: SignInViewControllerDelegate {
        var signedInWasCalled = false
        func signedIn(_ viewController: SignInViewController) {
            signedInWasCalled = true
        }
    }
    
    // MARK: Tests

    func testDisplaySignInResult_loginSuccess() {
        // Given
        loadView()
        sut.logInButton.displayLoading()
        sut.hideErrorLabel()

        // When
        sut.displaySignInResult(isLoggedIn: true, error: nil)

        // Then
        expect(self.sut.logInButton.isLoading).to(beFalse())
        expect(self.sut.errorLabel.isHidden).to(beTrue())
        expect(self.delegate.signedInWasCalled).to(beTrue())
    }
    
    func testDisplaySignInResult_loginFailed() {
        // Given
        loadView()
        sut.logInButton.displayLoading()
        sut.hideErrorLabel()
        
        // When
        sut.displaySignInResult(isLoggedIn: false, error: nil)
        
        // Then
        expect(self.sut.logInButton.isLoading).to(beFalse())
        expect(self.sut.errorLabel.isHidden).to(beFalse())
        expect(self.sut.errorLabel.text).to(equal("Login failed. Please check your email and password and try again."))
        expect(self.delegate.signedInWasCalled).to(beFalse())
    }
    
    func testDisplaySignInResult_withError() {
        // Given
        loadView()
        sut.logInButton.displayLoading()
        sut.hideErrorLabel()
        
        // When
        sut.displaySignInResult(isLoggedIn: false, error: MyFakeError.somethingWentWrong)
        
        // Then
        expect(self.sut.logInButton.isLoading).to(beFalse())
        expect(self.sut.errorLabel.isHidden).to(beFalse())
        expect(self.sut.errorLabel.text).to(equal("An error occurred while trying to log you in. Please try again in a few minutes."))
        expect(self.delegate.signedInWasCalled).to(beFalse())
    }
}
