//
//  FriendsInteractorTests.swift
//  mowine
//
//  Created by Josh Freed on 3/7/18.
//  Copyright (c) 2018 Josh Freed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import mowine
import XCTest
import JFLib
import Nimble

class FriendsInteractorTests: XCTestCase {
    // MARK: Subject under test

    var sut: FriendsInteractor!
    let worker = MockFriendsWorker()
    let spy = FriendsPresentationLogicSpy()

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        setupFriendsInteractor()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup

    func setupFriendsInteractor() {
        sut = FriendsInteractor()
        sut.worker = worker
        sut.presenter = spy
    }

    // MARK: Test doubles

    class FriendsPresentationLogicSpy: FriendsPresentationLogic {
        var presentFriendsCalled = false

        func presentFriends(response: Friends.FetchFriends.Response) {
            presentFriendsCalled = true
        }
        
        func presentSearchResults(response: Friends.SearchUsers.Response) {
            
        }
        
        var presentAddFriendCalled = false
        func presentAddFriend(response: Friends.AddFriend.Response) {
            presentAddFriendCalled = true
        }
        
        var presentAddFriendErrorCalled = false
        func presentAddFriendError(response: Friends.AddFriend.Response) {
            presentAddFriendErrorCalled = true
        }
    }
    
    class MockFriendsWorker: FriendsWorker {
        init() {
            super.init(userRepository: MockUserRepository(), session: MockSession())
        }
        
        var fetchMyFriendsResult: Result<[User]>?
        override func fetchMyFriends(completion: @escaping (Result<[User]>) -> ()) {
            if let result = fetchMyFriendsResult {
                completion(result)
            }
        }
        
        override func searchUsers(searchString: String, completion: @escaping (Result<[User]>) -> ()) {
            
        }
        
        var addFriendResult: EmptyResult?
        var addFriendCalled = false
        var addFriendUserId: UserId?
        override func addFriend(userId: UserId, completion: @escaping (EmptyResult) -> ()) {
            addFriendCalled = true
            addFriendUserId = userId
            if let result = addFriendResult {
                completion(result)
            }
        }
        
        func verifyAddFriendCalled(userId: UserId) {
            expect(self.addFriendCalled).to(beTrue())
            expect(self.addFriendUserId).to(equal(userId))
        }
    }

    // MARK: Tests

    func testFetchFriends() {
        // Given
        let request = Friends.FetchFriends.Request()
        worker.fetchMyFriendsResult = .success([])

        // When
        sut.fetchFriends(request: request)

        // Then
        XCTAssertTrue(spy.presentFriendsCalled, "fetchFriends(request:) should ask the presenter to format the result")
    }
    
    func testAddFriend() {
        // Given
        let userId = UserId()
        let request = Friends.AddFriend.Request(userId: String(describing: userId))
        worker.addFriendResult = .success
        
        // When
        sut.addFriend(request: request)
        
        // Then
        worker.verifyAddFriendCalled(userId: userId)
        expect(self.spy.presentAddFriendCalled).to(beTrue())
    }
    
    func testAddFriendFailsIfGivenInvalidUserId() {
        // Given
        let request = Friends.AddFriend.Request(userId: "not a uuid")
        
        // When
        sut.addFriend(request: request)
        
        // Then
        expect(self.worker.addFriendCalled).to(beFalse())
        expect(self.spy.presentAddFriendCalled).to(beFalse())
    }
    
    func testAddFriendShouldPresentAnError() {
        // Given
        let userId = UserId()
        let request = Friends.AddFriend.Request(userId: String(describing: userId))
        worker.addFriendResult = .failure(TestingError.someError)
        
        // When
        sut.addFriend(request: request)
        
        // Then
        worker.verifyAddFriendCalled(userId: userId)
        expect(self.spy.presentAddFriendCalled).to(beFalse())
        expect(self.spy.presentAddFriendErrorCalled).to(beTrue())
    }
}


