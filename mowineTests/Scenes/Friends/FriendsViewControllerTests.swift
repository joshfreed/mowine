//
//  FriendsViewControllerTests.swift
//  mowine
//
//  Created by Josh Freed on 3/7/18.
//  Copyright (c) 2018 Josh Freed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import mowine
import XCTest

class FriendsViewControllerTests: XCTestCase {
    // MARK: Subject under test

    var sut: FriendsViewController!
    var window: UIWindow!

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupFriendsViewController()
    }

    override func tearDown() {
        window = nil
        super.tearDown()
    }

    // MARK: Test setup

    func setupFriendsViewController() {
        let bundle = Bundle.main
        let storyboard = UIStoryboard(name: "Main", bundle: bundle)
        sut = storyboard.instantiateViewController(withIdentifier:"FriendsViewController") as! FriendsViewController
    }

    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }

    // MARK: Test doubles

    class FriendsBusinessLogicSpy: FriendsBusinessLogic {
        var fetchFriendsCalled = false
        func fetchFriends(request: Friends.FetchFriends.Request) {
            fetchFriendsCalled = true
        }
        
        func searchUsers(request: Friends.SearchUsers.Request) {
            
        }
    }

    // MARK: Tests

    func testShouldDoSomethingWhenViewIsLoaded() {
        // Given
        let spy = FriendsBusinessLogicSpy()
        sut.interactor = spy

        // When
        loadView()

        // Then
        XCTAssertTrue(spy.fetchFriendsCalled, "viewDidLoad() should ask the interactor to do something")
    }

    func testDisplayFriends() {
        // Given
        let viewModel = Friends.FetchFriends.ViewModel(friends: [])

        // When
        loadView()
        sut.displayFriends(viewModel: viewModel)

        // Then
        //XCTAssertEqual(sut.nameTextField.text, "", "displaySomething(viewModel:) should update the name text field")
    }
}
