//
//  FriendsWorkerTests.swift
//  mowine
//
//  Created by Josh Freed on 3/7/18.
//  Copyright (c) 2018 Josh Freed. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import mowine
import XCTest
import Nimble

class FriendsWorkerTests: XCTestCase {
    // MARK: Subject under test

    var sut: FriendsWorker!
    let userRepository = MockUserRepository()
    let session = MockSession()

    // MARK: Test lifecycle

    override func setUp() {
        super.setUp()
        setupFriendsWorker()
    }

    override func tearDown() {
        super.tearDown()
    }

    // MARK: Test setup

    func setupFriendsWorker() {
        sut = FriendsWorker(userRepository: userRepository, session: session)
    }

    // MARK: Test doubles

    // MARK: Fetch my friends

    func testFetchMyFriends() {
        // Given
        let me = UserBuilder.aUser().build()
        session.login(user: me)
        let friend1 = UserBuilder.aUser().build()
        let friend2 = UserBuilder.aUser().build()
        userRepository.getFriendsOfResult = .success([friend1, friend2])
        var foundFriends: [User]?
        
        // When
        sut.fetchMyFriends { result in
            if case let .success(users) = result {
                foundFriends = users
            }
        }

        // Then
        expect(self.userRepository.getFriendsOfWasCalled).to(beTrue())
        expect(self.userRepository.getFriendsOf_userId).to(equal(me.id))
        expect(foundFriends).to(haveCount(2))
        expect(foundFriends).to(contain(friend1))
        expect(foundFriends).to(contain(friend2))
    }
    
    // searchUsers
    
    func testSearchUsers() {
        // Given
        session.login(user: UserBuilder.aUser().build())
        let user1 = UserBuilder.aUser().build()
        let user2 = UserBuilder.aUser().build()
        let user3 = UserBuilder.aUser().build()
        userRepository.searchUsersResult = .success([user1, user2, user3])
        let searchString = "jimmy"
        var foundUsers: [User]?
        
        // When
        sut.searchUsers(searchString: searchString) { result in
            if case let .success(users) = result {
                foundUsers = users
            }
        }
        
        // Then
        expect(self.userRepository.searchUsersWasCalled).to(beTrue())
        expect(self.userRepository.searchUsers_searchString).to(equal("jimmy"))
        expect(foundUsers).to(haveCount(3))
        expect(foundUsers).to(contain(user1))
        expect(foundUsers).to(contain(user2))
        expect(foundUsers).to(contain(user3))
    }
    
    func testSearchUsers_doesNotIncludeCurrentUser() {
        // Given
        let user1 = UserBuilder.aUser().build()
        let user2 = UserBuilder.aUser().build()
        let user3 = UserBuilder.aUser().build()
        session.login(user: user2)
        userRepository.searchUsersResult = .success([user1, user2, user3])
        let searchString = "jimmy"
        var foundUsers: [User]?
        
        // When
        sut.searchUsers(searchString: searchString) { result in
            if case let .success(users) = result {
                foundUsers = users
            }
        }
        
        // Then
        expect(foundUsers).to(haveCount(2))
        expect(foundUsers).to(contain(user1))
        expect(foundUsers).toNot(contain(user2))
        expect(foundUsers).to(contain(user3))
    }
    
    func testSearchUsers_returnsEmptyArraySearchStringIsBlank() {
        // Given
        let me = UserBuilder.aUser().build()
        session.login(user: me)
        let user1 = UserBuilder.aUser().build()
        let user2 = UserBuilder.aUser().build()
        let user3 = UserBuilder.aUser().build()
        userRepository.searchUsersResult = .success([user1, user2, user3])
        var foundUsers: [User]?
        
        // When
        sut.searchUsers(searchString: "") { result in
            if case let .success(users) = result {
                foundUsers = users
            }
        }
        
        // Then
        expect(foundUsers).to(beEmpty())
    }
    
    // MARK: addFriend
    
    func testAddFriend() {
        // Given
        let me = UserBuilder.aUser().build()
        session.login(user: me)
        let friendId = UserId()
        
        // When
        sut.addFriend(userId: friendId) { result in }
        
        // Then
        expect(self.userRepository.addFriendCalled).to(beTrue())
        expect(self.userRepository.addFriend_owningUserId).to(equal(me.id))
        expect(self.userRepository.addFriend_friendId).to(equal(friendId))
    }
    
    func testAddFriend_failsIfNoCurrentUser() {
        // Given
        session.end()
        let friendId = UserId()
        var foundError: Error?
        
        // When
        sut.addFriend(userId: friendId) { result in
            if case let .failure(error) = result {
                foundError = error
            }
        }
        
        // Then
        expect(self.userRepository.addFriendCalled).to(beFalse())
        expect(foundError).to(matchError(FriendsWorkerError.notLoggedIn))
    }
}
